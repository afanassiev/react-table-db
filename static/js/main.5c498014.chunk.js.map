{"version":3,"sources":["components/ModeSelector.js","components/Loader/Loader.js","components/TablePaginationActions.js","components/AddUserDialog.js","components/GlobalFilter.js","components/TableToolbar.js","components/EnhancedTable.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","button","marginLeft","props","classes","className","Button","variant","color","onClick","onSelect","theme","root","flexShrink","spacing","TablePaginationActions","useTheme","count","page","rowsPerPage","onChangePage","IconButton","event","disabled","aria-label","direction","Math","ceil","max","initialUser","id","firstName","lastName","phone","email","subRows","undefined","AddUserDialog","name","useState","user","setUser","addUserHandler","React","open","setOpen","addMultiple","switchState","setSwitchState","handleClose","handleChange","value","target","Tooltip","title","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","margin","label","type","fullWidth","onChange","autoFocus","DialogActions","Switch","checked","inputProps","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","width","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","length","InputBase","e","placeholder","input","useToolbarStyles","paddingLeft","paddingRight","highlight","secondary","main","lighten","light","text","primary","dark","flex","TableToolbar","numSelected","deleteUserHandler","Toolbar","clsx","Typography","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","Checkbox","inputStyle","border","background","defaultColumn","Cell","initialValue","index","row","column","updateMyData","setValue","style","onBlur","EnhancedTable","columns","data","setData","skipPageReset","useTable","autoResetPage","useGlobalFilter","useSortBy","usePagination","useRowSelect","hooks","allColumns","push","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","state","pageIndex","pageSize","selectedRowIds","TableContainer","Object","keys","array","indexs","newData","map","x","parseInt","filter","_","i","includes","concat","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","getSortByToggleProps","render","TableSortLabel","active","isSorted","isSortedDesc","TableBody","getRowProps","cells","cell","getCellProps","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","native","newPage","onChangeRowsPerPage","Number","ActionsComponent","App","useMemo","accessor","setSkipPageReset","isModeSelected","setIsModeSelected","isLoading","setIsLoading","fetchData","url","a","axios","result","CssBaseline","rowIndex","columnId","old","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c498014.chunk.js","sourcesContent":["import React from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport './ModeSelector.css'\n\nimport {makeStyles} from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(() => ({\n  button: {\n    marginLeft: '10px'\n  }\n}))\n\nexport default props => {\n  const classes = useStyles();\n  return (\n    <div className=\"ModeSelector\">\n      <Button variant=\"contained\" color=\"primary\" onClick={() => props.onSelect('https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}')}>32 items</Button>\n      <Button className={classes.button} variant=\"contained\" color=\"secondary\" onClick={() => props.onSelect('https://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}')}>1000 items</Button>\n    </div>\n  )\n}\n","import React from \"react\";\nimport './Loader.css'\n\nexport default () => <div className=\"center\"><div className=\"lds-dual-ring\"/></div>\n","import React from 'react'\n\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\nimport IconButton from '@material-ui/core/IconButton'\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport LastPageIcon from '@material-ui/icons/LastPage'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}))\n\nconst TablePaginationActions = props => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onChangePage } = props\n\n  const handleFirstPageButtonClick = event => {\n    onChangePage(event, 0)\n  }\n\n  const handleBackButtonClick = event => {\n    onChangePage(event, page - 1)\n  }\n\n  const handleNextButtonClick = event => {\n    onChangePage(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = event => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  )\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n}\n\nexport default TablePaginationActions\n","import React, { useState } from 'react'\n\nimport AddIcon from '@material-ui/icons/Add'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport IconButton from '@material-ui/core/IconButton'\nimport PropTypes from 'prop-types'\nimport Switch from '@material-ui/core/Switch'\nimport TextField from '@material-ui/core/TextField'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nconst initialUser = {\n  id: '',\n  firstName: '',\n  lastName: '',\n  phone: 0,\n  email: '',\n  subRows: undefined,\n}\n\nconst AddUserDialog = props => {\n  const [user, setUser] = useState(initialUser)\n  const { addUserHandler } = props\n  const [open, setOpen] = React.useState(false)\n\n  const [switchState, setSwitchState] = React.useState({\n    addMultiple: false,\n  })\n\n  const handleSwitchChange = name => event => {\n    setSwitchState({ ...switchState, [name]: event.target.checked })\n  }\n\n  const resetSwitch = () => {\n    setSwitchState({ addMultiple: false })\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n    resetSwitch()\n  }\n\n  const handleAdd = event => {\n    addUserHandler(user)\n    setUser(initialUser)\n    switchState.addMultiple ? setOpen(true) : setOpen(false)\n  }\n\n  const handleChange = name => ({ target: { value } }) => {\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <div>\n      <Tooltip title=\"Add\">\n        <IconButton aria-label=\"add\" onClick={handleClickOpen}>\n          <AddIcon />\n        </IconButton>\n      </Tooltip>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add User</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Demo add item to react table.</DialogContentText>\n          <TextField\n            margin=\"dense\"\n            label=\"ID\"\n            type=\"number\"\n            fullWidth\n            value={user.id}\n            onChange={handleChange('id')}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"First Name\"\n            type=\"text\"\n            fullWidth\n            value={user.firstName}\n            onChange={handleChange('firstName')}\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"Last Name\"\n            type=\"text\"\n            fullWidth\n            value={user.lastName}\n            onChange={handleChange('lastName')}\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"E-mail\"\n            type=\"text\"\n            fullWidth\n            value={user.email}\n            onChange={handleChange('email')}\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"Phone\"\n            type=\"number\"\n            fullWidth\n            value={user.phone}\n            onChange={handleChange('phone')}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Tooltip title=\"Add multiple\">\n            <Switch\n              checked={switchState.addMultiple}\n              onChange={handleSwitchChange('addMultiple')}\n              value=\"addMultiple\"\n              inputProps={{ 'aria-label': 'secondary checkbox' }}\n            />\n          </Tooltip>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleAdd} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nAddUserDialog.propTypes = {\n  addUserHandler: PropTypes.func.isRequired,\n}\n\nexport default AddUserDialog\n","import React from 'react'\n\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n}))\n\nconst GlobalFilter = ({\n                        preGlobalFilteredRows,\n                        globalFilter,\n                        setGlobalFilter,\n                      }) => {\n  const classes = useStyles()\n  const count = preGlobalFilteredRows.length\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        value={globalFilter || ''}\n        onChange={e => {\n          setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n        }}\n        placeholder={`${count} records...`}\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ 'aria-label': 'search' }}\n      />\n    </div>\n  )\n}\n\nGlobalFilter.propTypes = {\n  preGlobalFilteredRows: PropTypes.array.isRequired,\n  globalFilter: PropTypes.string.isRequired,\n  setGlobalFilter: PropTypes.func.isRequired,\n}\n\nexport default GlobalFilter\n","import React from 'react'\n\nimport AddUserDialog from './AddUserDialog'\nimport clsx from 'clsx'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport GlobalFilter from './GlobalFilter'\nimport IconButton from '@material-ui/core/IconButton'\nimport { lighten, makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n        color: theme.palette.secondary.main,\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n      }\n      : {\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.secondary.dark,\n      },\n  title: {\n    flex: '1 1 100%',\n  },\n}))\n\nconst TableToolbar = props => {\n  const classes = useToolbarStyles()\n  const {\n    numSelected,\n    addUserHandler,\n    deleteUserHandler,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    globalFilter,\n  } = props\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      <AddUserDialog addUserHandler={addUserHandler} />\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Users\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\" onClick={deleteUserHandler}>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <GlobalFilter\n          preGlobalFilteredRows={preGlobalFilteredRows}\n          globalFilter={globalFilter}\n          setGlobalFilter={setGlobalFilter}\n        />\n      )}\n    </Toolbar>\n  )\n}\n\nTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  addUserHandler: PropTypes.func.isRequired,\n  deleteUserHandler: PropTypes.func.isRequired,\n  setGlobalFilter: PropTypes.func.isRequired,\n  preGlobalFilteredRows: PropTypes.array.isRequired,\n  globalFilter: PropTypes.string.isRequired,\n}\n\nexport default TableToolbar\n","import React from 'react'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport MaUTable from '@material-ui/core/Table'\nimport PropTypes from 'prop-types'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TablePaginationActions from './TablePaginationActions'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport TableToolbar from './TableToolbar'\nimport {\n  useGlobalFilter,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useTable,\n} from 'react-table'\n\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef()\n    const resolvedRef = ref || defaultRef\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate\n    }, [resolvedRef, indeterminate])\n\n    return (\n      <>\n        <Checkbox ref={resolvedRef} {...rest}/>\n      </>\n    )\n  }\n)\n\nconst inputStyle = {\n  padding: 0,\n  margin: 0,\n  border: 0,\n  background: 'transparent',\n}\n\nconst EditableCell = ({\n                        value: initialValue,\n                        row: { index },\n                        column: { id },\n                        updateMyData,\n                      }) => {\n  const [value, setValue] = React.useState(initialValue)\n\n  const onChange = e => {\n    setValue(e.target.value)\n  }\n\n  const onBlur = () => {\n    updateMyData(index, id, value)\n  }\n\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <input\n      style={inputStyle}\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n    />\n  )\n}\n\nEditableCell.propTypes = {\n  cell: PropTypes.shape({\n    value: PropTypes.any.isRequired,\n  }),\n  row: PropTypes.shape({\n    index: PropTypes.number.isRequired,\n  }),\n  column: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  }),\n  updateMyData: PropTypes.func.isRequired,\n}\n\nconst defaultColumn = {\n  Cell: EditableCell,\n}\n\nconst EnhancedTable = ({\n                         columns,\n                         data,\n                         setData,\n                         updateMyData,\n                         skipPageReset,\n                       }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: { pageIndex, pageSize, selectedRowIds, globalFilter },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      updateMyData,\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    hooks => {\n      hooks.allColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <div>\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </div>\n          ),\n          Cell: ({ row }) => (\n            <div>\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const handleChangePage = (event, newPage) => {\n    gotoPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setPageSize(Number(event.target.value))\n  }\n\n  const removeByIndexs = (array, indexs) =>\n    array.filter((_, i) => !indexs.includes(i))\n\n  const deleteUserHandler = event => {\n    const newData = removeByIndexs(\n      data,\n      Object.keys(selectedRowIds).map(x => parseInt(x, 10))\n    )\n    setData(newData)\n  }\n\n  const addUserHandler = user => {\n    const newData = data.concat([user])\n    setData(newData)\n  }\n\n  return (\n    <TableContainer>\n      <TableToolbar\n        numSelected={Object.keys(selectedRowIds).length}\n        deleteUserHandler={deleteUserHandler}\n        addUserHandler={addUserHandler}\n        preGlobalFilteredRows={preGlobalFilteredRows}\n        setGlobalFilter={setGlobalFilter}\n        globalFilter={globalFilter}\n      />\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map(headerGroup => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableCell\n                  {...(column.id === 'selection'\n                    ? column.getHeaderProps()\n                    : column.getHeaderProps(column.getSortByToggleProps()))}\n                >\n                  {column.render('Header')}\n                  {column.id !== 'selection' ? (\n                    <TableSortLabel\n                      active={column.isSorted}\n                      direction={column.isSortedDesc ? 'desc' : 'asc'}\n                    />\n                  ) : null}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableCell>\n                  )\n                })}\n              </TableRow>\n            )\n          })}\n        </TableBody>\n\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[\n                5,\n                10,\n                25,\n                { label: 'All', value: data.length },\n              ]}\n              colSpan={3}\n              count={data.length}\n              rowsPerPage={pageSize}\n              page={pageIndex}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </MaUTable>\n    </TableContainer>\n  )\n}\n\nEnhancedTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  updateMyData: PropTypes.func.isRequired,\n  setData: PropTypes.func.isRequired,\n  skipPageReset: PropTypes.bool.isRequired,\n}\n\nexport default EnhancedTable\n","import React, {useState, useMemo} from 'react'\nimport axios from 'axios'\nimport ModeSelector from \"./components/ModeSelector\";\nimport Loader from \"./components/Loader/Loader\";\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EnhancedTable from './components/EnhancedTable'\n\nconst App = () => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id',\n      },\n      {\n        Header: 'First Name',\n        accessor: 'firstName',\n      },\n      {\n        Header: 'Last Name',\n        accessor: 'lastName',\n      },\n      {\n        Header: 'E-mail',\n        accessor: 'email',\n      },\n      {\n        Header: 'Phone',\n        accessor: 'phone',\n      },\n    ],\n    []\n  )\n\n  const [data, setData] = useState(useMemo(() => [], []))\n  const [skipPageReset, setSkipPageReset] = useState(false)\n  const [isModeSelected, setIsModeSelected] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const modeSelectHandler = (url) => {\n    setIsModeSelected(true)\n    fetchData(url)\n  }\n\n  const fetchData = async (url) => {\n    const result = await axios(\n      url\n    )\n    setData(result.data)\n    setIsLoading(false)\n  }\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  if(!isModeSelected){\n    return (\n      <div>\n        <ModeSelector onSelect={modeSelectHandler} />\n      </div>\n    )\n  } else {\n    if (isLoading) {\n      return (\n        <Loader/>\n      )\n    } else {\n      return (\n        <div>\n          <CssBaseline/>\n          <EnhancedTable\n            columns={columns}\n            data={data}\n            setData={setData}\n            updateMyData={updateMyData}\n            skipPageReset={skipPageReset}\n          />\n        </div>\n      )\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import {BrowserRouter} from 'react-router-dom';\n\n// const app = (\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>\n// )\n//\n// ReactDOM.render(\n//   app,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}